[{"content":"basic python in this post, i\u0026rsquo;ll show you everything you need to know to start coding in python and score high on basic python tests i wish i had 4 years ago. lets dive right in!\ncomments inline comment:\n# this is a comment multiline comment:\n# this is a # multiline comment code with a comment:\na = 1 # initialization please note the two spaces in front of the comment.\nmath operators from highest to lowest precedence:\noperators operation example ** exponent 2 ** 3 = 8 % modulus/remainder 22 % 8 = 6 // integer division 22 // 8 = 2 / division 22 / 8 = 2.75 * multiplication 3 * 3 = 9 - subtraction 5 - 2 = 3 + addition 2 + 2 = 4 examples of expressions:\n\u0026gt;\u0026gt;\u0026gt; 2 + 3 * 6 # 20 \u0026gt;\u0026gt;\u0026gt; (2 + 3) * 6 # 30 \u0026gt;\u0026gt;\u0026gt; 2 ** 8 #256 \u0026gt;\u0026gt;\u0026gt; 23 // 7 # 3 \u0026gt;\u0026gt;\u0026gt; 23 % 7 # 2 \u0026gt;\u0026gt;\u0026gt; (5 - 1) * ((7 + 1) / (3 - 1)) # 16.0 data types data type examples integers -2, -1, 0, 1, 2, 3, 4, 5 floating-point numbers -1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25 strings 'a', 'aa', 'aaa', 'hello!', '11 cats', '123' important: note that \u0026lsquo;123\u0026rsquo; is still a string.\nvariables you can name a variable anything as long as it obeys the following rules:\nit can be only one word. \u0026gt;\u0026gt;\u0026gt; # bad \u0026gt;\u0026gt;\u0026gt; my variable = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # good \u0026gt;\u0026gt;\u0026gt; var = \u0026#39;hello\u0026#39; it can use only letters, numbers, and the underscore (_) character. \u0026gt;\u0026gt;\u0026gt; # bad \u0026gt;\u0026gt;\u0026gt; %$@variable = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # good \u0026gt;\u0026gt;\u0026gt; my_var = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # good \u0026gt;\u0026gt;\u0026gt; my_var_2 = \u0026#39;hello\u0026#39; it can’t begin with a number. \u0026gt;\u0026gt;\u0026gt; # this wont work \u0026gt;\u0026gt;\u0026gt; 23_var = \u0026#39;hello\u0026#39; variable name starting with an underscore (_) are considered as \u0026ldquo;unuseful\u0026rdquo;. \u0026gt;\u0026gt;\u0026gt; # _spam should not be used again in the code \u0026gt;\u0026gt;\u0026gt; _spam = \u0026#39;hello\u0026#39; the print() function the print() function writes the value of the argument(s) it is given. [\u0026hellip;] it handles multiple arguments, floating point-number, integer, and strings. strings are printed without quotes, and a space is inserted when items are separated by a comma: \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39;) # output: hello world! \u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39;, a) # output: hello world! 1 concatenate items \u0026gt;\u0026gt;\u0026gt; #good \u0026gt;\u0026gt;\u0026gt; a = \u0026#39;joe\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39; + a) # output: hello world!joe \u0026gt;\u0026gt;\u0026gt; #bad \u0026gt;\u0026gt;\u0026gt; a = 1 #integer(int) \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39; + a) # string(str) + integer(int) # typeerror: can only concatenate str (not \u0026#34;int\u0026#34;) to str the input() function this function takes the input from the user and converts it into a string:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#39;what is your name?\u0026#39;) # ask for their name \u0026gt;\u0026gt;\u0026gt; my_name = input() \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hi\u0026#39;, my_name) # what is your name? # martha # hi, martha input() can also set a default message without using print():\n\u0026gt;\u0026gt;\u0026gt; my_name = input(\u0026#39;what is your name? \u0026#39;) # default message \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hi\u0026#39;, my_name) # what is your name? martha # hi, martha the str(), int(), and float() functions these functions allow you to change the type of variable. for example, you can transform from an integer or float to a string:\n\u0026gt;\u0026gt;\u0026gt; str(29) # str # \u0026#39;29\u0026#39; \u0026gt;\u0026gt;\u0026gt; str(-3.14) # str # \u0026#39;-3.14\u0026#39; or from a string to an integer or float:\n\u0026gt;\u0026gt;\u0026gt; int(\u0026#39;11\u0026#39;) # integer # 11 \u0026gt;\u0026gt;\u0026gt; float(\u0026#39;3.14\u0026#39;) # decimal # 3.14 conditions to do this in python, you use the if, else and elif keywords. these two keywords are called conditionals.\nuse the if keyword in python \u0026gt;\u0026gt;\u0026gt; if(condition): indented block of decision to make if condition is true \u0026gt;\u0026gt;\u0026gt; # example \u0026gt;\u0026gt;\u0026gt; teambrian = 99 \u0026gt;\u0026gt;\u0026gt; teamjack = 59 \u0026gt;\u0026gt;\u0026gt; if(teambrian \u0026gt; teamjack): print(\u0026#34;team brian won the league\u0026#34;) # output: team brian won the league important: if the condition in the ifstatement is not met, nothing happens.\n\u0026gt;\u0026gt;\u0026gt; teambrian = 59 \u0026gt;\u0026gt;\u0026gt; teamjack = 99 \u0026gt;\u0026gt;\u0026gt; if(teambrian \u0026gt; teamjack): print(\u0026#34;team brian won the league\u0026#34;) # output: nothing will output because if statement is not met use the else keyword in python. since nothing happens if the condition in an if statement is not met, you can catch that with an else statement.\n\u0026gt;\u0026gt;\u0026gt; if(condition): indented block of decision to make if condition is true else: indented block of decision to make if condition is not true \u0026gt;\u0026gt;\u0026gt; # example \u0026gt;\u0026gt;\u0026gt; teambrian = 59 \u0026gt;\u0026gt;\u0026gt; teamjack = 99 \u0026gt;\u0026gt;\u0026gt; if(teambrian \u0026gt; teamjack): print(\u0026#34;team brian won the league\u0026#34;) else: print(\u0026#34;team jack won the league\u0026#34;) # output: team jack won the league use the elif keyword in python another conditional keyword in python is elif, which you can put in between an if and else. elif is more specific then else\n\u0026gt;\u0026gt;\u0026gt; # example \u0026gt;\u0026gt;\u0026gt; teambrian = 59 \u0026gt;\u0026gt;\u0026gt; teamjack = 89 \u0026gt;\u0026gt;\u0026gt; teamlilian = 99 \u0026gt;\u0026gt;\u0026gt; if(teambrian \u0026gt; teamjack): print(\u0026#34;team brian won the league\u0026#34;) elif(teamlilian \u0026gt; teambrian): print(\u0026#34;team lilian won the league\u0026#34;) else: print(\u0026#34;team jack won the league\u0026#34;) # output: team lilian won the league import basically, import allows you to use pre-written code of someone else who already wrote the code and willing to share it.\nthis code would have to be written if the random module was not used\n# this code don\u0026#39;t work as it is only a small portion of the random module def randrange(self, start, stop=none, step=_one): \u0026#34;\u0026#34;\u0026#34;choose a random item from range(stop) or range(start, stop[, step]). roughly equivalent to ``choice(range(start, stop, step))`` but supports arbitrarily large ranges and is optimized for common cases. \u0026#34;\u0026#34;\u0026#34; # this code is a bit messy to make it fast for the # common case while still doing adequate error checking. istart = _index(start) if stop is none: # we don\u0026#39;t check for \u0026#34;step != 1\u0026#34; because it hasn\u0026#39;t been # type checked and converted to an integer yet. if step is not _one: raise typeerror(\u0026#34;missing a non-none stop argument\u0026#34;) if istart \u0026gt; 0: return self._randbelow(istart) raise valueerror(\u0026#34;empty range for randrange()\u0026#34;) # stop argument supplied. istop = _index(stop) width = istop - istart istep = _index(step) # fast path. if istep == 1: if width \u0026gt; 0: return istart + self._randbelow(width) raise valueerror(f\u0026#34;empty rangein randrange({start}, {stop})\u0026#34;) # non-unit step argument supplied. if istep \u0026gt; 0: n = (width + istep - 1) // istep elif istep \u0026lt; 0: n = (width + istep + 1) // istep else: raise valueerror(\u0026#34;zero step for randrange()\u0026#34;) if n \u0026lt;= 0: raise valueerror(f\u0026#34;empty range in randrange({start}, {stop}, {step})\u0026#34;) return istart + istep * self._randbelow(n) def randint(self, a, b): \u0026#34;\u0026#34;\u0026#34;return random integer in range [a, b], including both end points. \u0026#34;\u0026#34;\u0026#34; return self.randrange(a, b+1) random = random.randint(1,100) #generate random number between 1 and 100 print(random) but if the random module was used, it will be much easier and more efficient to write your code.\nimport random random = random.randint(1,100) #generate random number between 1 and 100 print(random) while loop statements the while statement is used for repeated execution as long as an expression is true:\n\u0026gt;\u0026gt;\u0026gt; spam = 0 \u0026gt;\u0026gt;\u0026gt; while spam \u0026lt; 5: ... print(\u0026#39;brian\u0026#39;) ... spam = spam + 1 ... # output: # brian # brian # brian # brian # brian break statements if the execution reaches a break statement, it immediately exits the while loop’s clause:\n\u0026gt;\u0026gt;\u0026gt; while true: #infinite loop ... name = input(\u0026#39;please type your name: \u0026#39;) ... if name == \u0026#39;your name\u0026#39;: ... break ... \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;thank you!\u0026#39;) # please type your name: your name # thank you! continue statements when the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.\n\u0026gt;\u0026gt;\u0026gt; while true: ... name = input(\u0026#39;who are you? \u0026#39;) ... if name != \u0026#39;joe\u0026#39;: ... continue ... password = input(\u0026#39;password? (it is a fish.): \u0026#39;) ... if password == \u0026#39;swordfish\u0026#39;: ... break ... \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;access granted.\u0026#39;) # who are you? charles # who are you? debora # who are you? joe # password? (it is a fish.): swordfish # access granted. cool things to know concatenation and replication string concatenation:\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;alice\u0026#39; \u0026#39;bob\u0026#39; # \u0026#39;alicebob\u0026#39; string replication:\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;alice\u0026#39; * 5 # \u0026#39;alicealicealicealicealice\u0026#39; the end keyword the keyword argument end can be used to avoid the newline after the output, or end the output with a different string:\nphrase = [\u0026#39;printed\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;dash\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;between\u0026#39;] \u0026gt;\u0026gt;\u0026gt; for word in phrase: ... print(word, end=\u0026#39;-\u0026#39;) ... # printed-with-a-dash-in-between- the sep keyword the keyword sep specify how to separate the objects, if there is more than one:\nprint(\u0026#39;jack\u0026#39;, \u0026#39;lilian\u0026#39;, \u0026#39;charlotte\u0026#39;, sep=\u0026#39;,\u0026#39;) # jack,lilian,charlotte conclusion now i\u0026rsquo;d like to hear from you: how did you think of my cheat sheet? what is your favourite thing about python? comment below to let me know!\nnext step visit my blog next week where i will dive deep into python!\nsource summarise on the https://docs.python.org/3/tutorial/index.html python 3 tutorial\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; brian le \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n","permalink":"/posts/python-cheat-sheet/","summary":"basic python in this post, i\u0026rsquo;ll show you everything you need to know to start coding in python and score high on basic python tests i wish i had 4 years ago. lets dive right in!\ncomments inline comment:\n# this is a comment multiline comment:\n# this is a # multiline comment code with a comment:\na = 1 # initialization please note the two spaces in front of the comment.","title":"here is the best beginner friendly python cheatsheet (2022)"},{"content":" what\u0026rsquo;s hugo? hugo is a static site generator that enables you to create static files like html, css, and javascript in advance. it is a go-based open-source project that promises remarkable build times that are unmatched.\nwhat does it do? it aids in the converting of markdown files—the formats in which you will write your articles or blog posts—to static files that will be served afterwards.\nhow is it different? this is distinct from more conventional approaches like a wordpress site, which requires a dedicated database and a web server to reply to queries, communicate with the database, and serve the files on each request. since nothing is dynamic and we know the material won\u0026rsquo;t change, it is much slower than utilising a static-site generator like hugo. http web servers are very effective and quick in serving only static material. users request files, and the server only needs to provide them. there isn\u0026rsquo;t any additional processing applied.\nthe benefits your website may be set up and hosted anywhere (on gcp cloud storage, aws s3, netlfify, firebase, etc.), and it can be deployed to a cdn (content delivery network) to be cached on a global edge network, which will greatly enhance the performance and speed of page loads. this is crucial for seo and for those with slow internet connections (search engine optimization).\ncaveats that does not, however, imply that hugo cannot be utilised in a dynamic manner. you might not be able to use hugo if your use case is highly complex or involves user input. it could be preferable to use a standard website or single-page application built with react, angular, vue, or svelte. hugo, however, contains all the capabilities you want if all you want is a straightforward blog with a few extras, like the ability for people to leave comments.\nget started the hugo documentation is very helpful and elaborate. it is the first place to check in case of references or issues.\ninstallation hugo is available in all platforms (windows, macos, and linux), as a binary that you can install, or via a package manager. if you have a compatible package manager, that is the recommended way as it is the easiest and has the least amount of work to maintain\ninstall using the binaries availabe from their github releases page. (choose the appropriate platform and type of file). make sure to install it in a location that is somewhere in your path. usr/local/bin is the best place for linux. otherwise, append the location to your path variable.\ninstall using a package manager on windows\nchoco install hugo -confirm or\nscoop install hugo on linux and macos (using homebrew)\nbrew install hugo to verify that the installation occurred successfully, run the following command.\nhugo version there should not be any errors.\ncreating the site change directories into the location you want to create your project. then run the following command with your project\u0026rsquo;s name. this will create folder that contains all the files that you need to get started.\n# creates a new site and project called 'firstblog' hugo new site firstblog change directories into the project directory that was created.\ncd firstblog you will notice a similar folder structure. the config.toml file is where all the variables and settings for your projects live. you will be able to setup and configure most of your website from that one file.\n. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes if you want to change the file type for your configurations, you can change it to yaml or json depending on your preference. you can copy and paste the contents of the file using a tool like convertsimple to convert the format and syntax.\nall of the actual content that you write as markdown files lives inside the content directory. you can organize the content in folders, and subfolders, and hugo will automatically take care of organizing the posts as categories or subcategories.\nuse the following command to create a blank markdown file. you can specify where you want to store this file. if the file name alone is provided, then it is directly placed in the content directory.\nhugo create first-post.md or try the following to place it in content/posts:\nhugo create posts/first-post.md front matter every markdown file that is created and used for your website has a section on the top that is unique to hugo. it starts and ends with ---. the syntax used in this is toml by default. you can change this default setting with the following command:\n# to convert to yml hugo convert toyaml in the front matter, you can set options for the specific page, meta data, and other configuration that is specific to this particular page. check out the documentation of front matter to learn the different options available.\ninstall a theme one of the powers of hugo is to utilize one of the many themes created by the community. check out the complete list and choose one of the themes. install the theme after reading the documentation. this procedure is pretty simple. the majority of the time, you will need to manually or automatically download the code and place it in the themes folder before moving it into the folder with the name of the theme you selected.\nthen make sure to go to the config file and update the theme variable with the name of the theme you have chosen.\nrunning the site hugo comes with a built-in web server that enables local viewing of the website, continuously checks your files for updates, and restarts itself when necessary.\nhugo server -d deployment hugo creates your website using the following command, outputting the finished static content by default to the public directory. if necessary, that can be changed in the config file. whatever hosting service you decide to utilise, the contents of this file must be deployed.\nhugo -d bonus content comments you can add a comments or discussion section to all of your pages (or select ones) easily using disqus. instructions and setup is very straightforward and simple.\nstuck? i suggest watching this video from envato tuts+ if you\u0026rsquo;re a beginners or alternatively you can read this article from hugo.\nconclusion hugo is a perfect blog builder for tech geeks out there. if you\u0026rsquo;re a beginners in coding, i suggest using wordpress to build you\u0026rsquo;re blog. i\u0026rsquo;ll cover wordpress in the future on my blog\n","permalink":"/posts/blog-with-hugo/","summary":"what\u0026rsquo;s hugo? hugo is a static site generator that enables you to create static files like html, css, and javascript in advance. it is a go-based open-source project that promises remarkable build times that are unmatched.\nwhat does it do? it aids in the converting of markdown files—the formats in which you will write your articles or blog posts—to static files that will be served afterwards.\nhow is it different?","title":"how to create a blog using hugo (2022)"},{"content":"","permalink":"/posts/blog-with-hugo-copy/","summary":"","title":"Test123"}]